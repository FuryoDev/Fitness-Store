{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/mouji/IdeaProjects/Fitness-store-2022/angular-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ProductInfo } from \"../../../../common/shopping/product-info\";\nimport { CartItem } from \"../../../../common/shopping/cart-item\";\nlet ProductPageComponent = class ProductPageComponent {\n  constructor(route, productService, stockService, cartService, tokenStorageService) {\n    this.route = route;\n    this.productService = productService;\n    this.stockService = stockService;\n    this.cartService = cartService;\n    this.tokenStorageService = tokenStorageService;\n    this.productInfo = new ProductInfo();\n    this.currentProductId = 0;\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.cartItem = new CartItem();\n      _this.cartItem.quantity = 1; // use Promise.all() to wait for both getProductById() and getAStock() to complete\n\n      yield Promise.all([_this.getProductById(), _this.getAStock()]);\n    })();\n  }\n\n  getAStock() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // wait for getProductById() to complete before accessing its data\n      yield _this2.getProductById();\n\n      if (_this2.productInfo !== null) {\n        _this2.stockService.findStockByProduct(_this2.productInfo.productId).subscribe(data => {\n          _this2.stocks = data;\n        });\n      }\n    })();\n  }\n\n  getProductById() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.currentProductId = +_this3.route.snapshot.paramMap.get('prodId'); // set the productInfo value and wait for it to complete\n\n      yield _this3.productService.getProductById(_this3.currentProductId).toPromise().then(data => {\n        if (data != undefined) _this3.productInfo = data;\n      });\n    })();\n  }\n\n  addToCart() {\n    let user = this.tokenStorageService.getUser(); //TODO: Check if enough in stock\n\n    this.cartItem.productInfo = this.productInfo;\n    this.cartService.addToCart(this.cartItem).subscribe();\n  }\n\n  increment() {\n    this.cartItem.quantity++;\n  }\n\n  decrement() {\n    this.cartItem.quantity--;\n    if (this.cartItem.quantity == 0) this.cartItem.quantity = 1;\n  }\n\n};\nProductPageComponent = __decorate([Component({\n  selector: 'app-product-page',\n  templateUrl: './product-page.component.html',\n  styleUrls: ['./product-page.component.sass']\n})], ProductPageComponent);\nexport { ProductPageComponent };","map":{"version":3,"mappings":";;AAAA,SAAQA,SAAR,QAAgC,eAAhC;AACA,SAAQC,WAAR,QAA0B,0CAA1B;AAGA,SAAQC,QAAR,QAAuB,uCAAvB;AAYA,IAAaC,oBAAoB,GAAjC,MAAaA,oBAAb,CAAiC;EAQ/BC,YAAoBC,KAApB,EACoBC,cADpB,EAEoBC,YAFpB,EAGoBC,WAHpB,EAIoBC,mBAJpB,EAI4D;IAJxC;IACA;IACA;IACA;IACA;IAVpB,mBAA2B,IAAIR,WAAJ,EAA3B;IAEA,wBAA2B,CAA3B;EASC;;EAEKS,QAAQ;IAAA;;IAAA;MACZ,KAAI,CAACC,QAAL,GAAgB,IAAIT,QAAJ,EAAhB;MACA,KAAI,CAACS,QAAL,CAAcC,QAAd,GAAyB,CAAzB,CAFY,CAGZ;;MACA,MAAMC,OAAO,CAACC,GAAR,CAAY,CAAC,KAAI,CAACC,cAAL,EAAD,EAAwB,KAAI,CAACC,SAAL,EAAxB,CAAZ,CAAN;IAJY;EAKb;;EAEKA,SAAS;IAAA;;IAAA;MACb;MACA,MAAM,MAAI,CAACD,cAAL,EAAN;;MAEA,IAAG,MAAI,CAACE,WAAL,KAAqB,IAAxB,EAA8B;QAC5B,MAAI,CAACV,YAAL,CAAkBW,kBAAlB,CAAqC,MAAI,CAACD,WAAL,CAAiBE,SAAtD,EAAiEC,SAAjE,CAA2EC,IAAI,IAAG;UAChF,MAAI,CAACC,MAAL,GAAcD,IAAd;QACD,CAFD;MAGD;IARY;EASd;;EAEKN,cAAc;IAAA;;IAAA;MAClB,MAAI,CAACQ,gBAAL,GAAwB,CAAC,MAAI,CAAClB,KAAL,CAAWmB,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,QAAjC,CAAzB,CADkB,CAGlB;;MACA,MAAM,MAAI,CAACpB,cAAL,CAAoBS,cAApB,CAAmC,MAAI,CAACQ,gBAAxC,EAA0DI,SAA1D,GAAsEC,IAAtE,CACJP,IAAI,IAAG;QACL,IAAGA,IAAI,IAAIQ,SAAX,EACE,MAAI,CAACZ,WAAL,GAAmBI,IAAnB;MACH,CAJG,CAAN;IAJkB;EAUnB;;EAGDS,SAAS;IACP,IAAIC,IAAI,GAAG,KAAKtB,mBAAL,CAAyBuB,OAAzB,EAAX,CADO,CAEP;;IACA,KAAKrB,QAAL,CAAcM,WAAd,GAA4B,KAAKA,WAAjC;IACA,KAAKT,WAAL,CAAiBsB,SAAjB,CAA2B,KAAKnB,QAAhC,EAA0CS,SAA1C;EACD;;EAEDa,SAAS;IACP,KAAKtB,QAAL,CAAcC,QAAd;EACD;;EAEDsB,SAAS;IACP,KAAKvB,QAAL,CAAcC,QAAd;IACA,IAAI,KAAKD,QAAL,CAAcC,QAAd,IAA0B,CAA9B,EACE,KAAKD,QAAL,CAAcC,QAAd,GAAyB,CAAzB;EACH;;AA7D8B,CAAjC;AAAaT,oBAAoB,eALhCH,SAAS,CAAC;EACTmC,QAAQ,EAAE,kBADD;EAETC,WAAW,EAAE,+BAFJ;EAGTC,SAAS,EAAE,CAAC,+BAAD;AAHF,CAAD,CAKuB,GAApBlC,oBAAoB,CAApB;SAAAA","names":["Component","ProductInfo","CartItem","ProductPageComponent","constructor","route","productService","stockService","cartService","tokenStorageService","ngOnInit","cartItem","quantity","Promise","all","getProductById","getAStock","productInfo","findStockByProduct","productId","subscribe","data","stocks","currentProductId","snapshot","paramMap","get","toPromise","then","undefined","addToCart","user","getUser","increment","decrement","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\mouji\\IdeaProjects\\Fitness-store-2022\\angular-frontend\\src\\app\\components\\shopping\\showcase\\product-page\\product-page.component.ts"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {ProductInfo} from \"../../../../common/shopping/product-info\";\nimport {ProductService} from \"../../../../services/product.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {CartItem} from \"../../../../common/shopping/cart-item\";\nimport {CartService} from \"../../../../services/shopping/cart/cart.service\";\nimport {Stock} from \"../../../../common/prod-details/stock\";\nimport {StockService} from \"../../../../services/prod-details/stock.service\";\nimport {UserService} from \"../../../../services/authentication/user.service\";\nimport {TokenStorageService} from \"../../../../services/authentication/token-storage.service\";\n\n@Component({\n  selector: 'app-product-page',\n  templateUrl: './product-page.component.html',\n  styleUrls: ['./product-page.component.sass']\n})\nexport class ProductPageComponent implements OnInit {\n\n  productInfo: ProductInfo = new ProductInfo();\n  cartItem!: CartItem;\n  currentProductId: number = 0;\n  stocks!: Stock[];\n\n\n  constructor(private route: ActivatedRoute,\n              private productService: ProductService,\n              private stockService: StockService,\n              private cartService: CartService,\n              private tokenStorageService: TokenStorageService) {\n  }\n\n  async ngOnInit() {\n    this.cartItem = new CartItem();\n    this.cartItem.quantity = 1;\n    // use Promise.all() to wait for both getProductById() and getAStock() to complete\n    await Promise.all([this.getProductById(), this.getAStock()]);\n  }\n\n  async getAStock() {\n    // wait for getProductById() to complete before accessing its data\n    await this.getProductById();\n\n    if(this.productInfo !== null) {\n      this.stockService.findStockByProduct(this.productInfo.productId).subscribe(data => {\n        this.stocks = data;\n      })\n    }\n  }\n\n  async getProductById() {\n    this.currentProductId = +this.route.snapshot.paramMap.get('prodId')!;\n\n    // set the productInfo value and wait for it to complete\n    await this.productService.getProductById(this.currentProductId).toPromise().then(\n      data => {\n        if(data != undefined)\n          this.productInfo = data;\n      }\n    );\n  }\n\n\n  addToCart() {\n    let user = this.tokenStorageService.getUser();\n    //TODO: Check if enough in stock\n    this.cartItem.productInfo = this.productInfo;\n    this.cartService.addToCart(this.cartItem).subscribe()\n  }\n\n  increment() {\n    this.cartItem.quantity++;\n  }\n\n  decrement() {\n    this.cartItem.quantity--;\n    if (this.cartItem.quantity == 0)\n      this.cartItem.quantity = 1;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}